#include <stdio.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* link;
}NODE;

typedef struct{
    NODE* head;
    NODE* tail;//리스트 끝 관리용
    int count;
}LIST;

LIST* createList(void){
    LIST* list=(LIST*)malloc(sizeof(LIST));
    if(list){
        list->head=NULL;
        list->tail=NULL;
        list->count=0;
    }
    return list;
}

static int addNode(LIST* list,  int dataIn){
    NODE* newNode=(NODE*)malloc(sizeof(NODE));
    if(newNode){
        newNode->data=dataIn;
        newNode->link=NULL;
        
        if(list->head==NULL) list->head=newNode;
        else list->tail->link=newNode;
        list->tail=newNode;
        list->count++;
        return 1;
    }
    return 0;
}

void makeSnailList(LIST* list, int V){
    NODE* current = list->head;
    for (int i = 1; i < V; i++) {
        current = current->link;
    }
    //printf("점검: %d\n",current->data);
    list->tail->link = current;
}

void destroyNode(LIST* list){
    NODE* current = list->head;
    if (list->tail) {
        list->tail->link = NULL;  // 원형 리스트의 끝을 표시
    }

    while (current != NULL) {
        NODE* temp = current;
        current = current->link;
        free(temp);
    }
    free(list);
}



int main()
{
    LIST* list=createList();
    
    int N,M,V;
    scanf("%d %d %d",&N,&M,&V);
    
    
    //달팽이 리스트 만들기
    for (int i=0;i<N;i++){
        int data;
        scanf("%d",&data);
        addNode(list, data);
    }
    
    makeSnailList(list,V);
    
    
    int K;
    for (int i=0; i<M; i++){
        scanf("%d",&K);
        NODE* current=list->head;
        if(K<list->count){
            for (int j=0;j<K;j++) {
                current=current->link;
            }
            printf("%d\n",current->data);
        }
        
        else{
            NODE* current=list->tail->link;
            //printf("점검2:%d\n",current->data);
            //printf("반복 횟수:%d\n",(K-(V-1))%(list->count-(V-1)));
            for(int j=0;j<(K-(V-1))%(list->count-(V-1));j++){
                current=current->link;
                //printf("연결됨 %d\n",current->data);
            }
            printf("%d\n",current->data);
        }
        
       
    }
    destroyNode(list);
    return 0;
}
